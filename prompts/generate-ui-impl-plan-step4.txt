As a senior frontend developer, your task is to create a detailed implementation plan for a new view in a web application. This plan should be comprehensive and clear enough for another frontend developer to correctly and efficiently implement the view.

First, review the following information:

1. Product Requirements Document (PRD):
<prd>
{{prd}} <- replace with a reference to the file @prd.md
</prd>

2. View Description:
<view_description>
{{view-description}} <- paste the description of the view to be implemented from ui-plan.md
</view_description>

3. User Stories:
<user_stories>
{{user-stories}} <- paste the user stories from @prd.md that will be addressed by the view
</user_stories>

4. Endpoint Description:
<endpoint_description>
{{endpoint-description}} <- paste the endpoint descriptions from api-plan.md that the view will use
</endpoint_description>

5. Endpoint Implementation:
<endpoint_implementation>
{{endpoint-implementation}} <- replace with a reference to the implementation of the endpoints used by the view (e.g. @generations.ts, @flashcards.ts)
</endpoint_implementation>

6. Type Definitions:
<type_definitions>
{{types}} <- replace with a reference to the file with DTO definitions (e.g. @types.ts)
</type_definitions>

7. Tech Stack:
<tech_stack>
{{tech-stack}} <- replace with a reference to the file @tech-stack.md
</tech_stack>

Before creating the final implementation plan, conduct analysis and planning within the <implementation_breakdown> tags in your thinking block. This section can be quite long, as it is important to be thorough.

In your implementation breakdown, perform the following steps:
1. For each input section (PRD, User Stories, Endpoint Description, Endpoint Implementation, Type Definitions, Tech Stack):
  - Summarize key points
  - List any requirements or constraints
  - Note any potential challenges or important issues
2. Extract and list key requirements from the PRD
3. List all main required components, with a brief description of their purpose, required types, handled events, and validation conditions
4. Create a high-level component tree diagram
5. Identify required DTOs and custom ViewModel types for each view component. Explain these new types in detail, breaking down their fields and related types.
6. Identify potential state variables and custom hooks, explaining their purpose and how they are used
7. List required API calls and their corresponding frontend actions
8. Map each user story to specific implementation details, components, or features
9. List user interactions and their expected outcomes
10. List conditions required by the API and how to validate them at the component level
11. Identify potential error scenarios and suggest how to handle them
12. List potential challenges in implementing this view and suggest possible solutions

After completing the analysis, provide the implementation plan in Markdown format with the following sections:

1. Overview: A brief summary of the view and its purpose.
2. View Routing: Specify the path where the view should be available.
3. Component Structure: Outline the main components and their hierarchy.
4. Component Details: For each component, describe:
 - Component description, its purpose, and what it consists of
 - Main HTML elements and child components that build the component
 - Supported events
 - Validation conditions (detailed, according to the API)
 - Types (DTO and ViewModel) required by the component
 - Props the component receives from its parent (component interface)
5. Types: Detailed description of the types required to implement the view, including a precise breakdown of any new types or view models by fields and types.
6. State Management: Detailed description of how state is managed in the view, specifying if a custom hook is required.
7. API Integration: Explanation of how to integrate with the provided endpoint. Precisely indicate request and response types.
8. User Interactions: Detailed description of user interactions and how they are handled.
9. Conditions and Validation: Describe which conditions are verified by the interface, which components they concern, and how they affect the interface state.
10. Error Handling: Description of how to handle potential errors or edge cases.
11. Implementation Steps: Step-by-step guide for implementing the view.

Ensure your plan complies with the PRD, user stories, and takes into account the provided tech stack.

The final output should be in Polish and saved in a file named .ai/{view-name}-view-implementation-plan.md. Do not include any analysis or planning in the final output.

Here is an example of what the output file should look like (content to be replaced):

```markdown
# View Implementation Plan [View Name]

## 1. Overview
[Brief description of the view and its purpose]

## 2. View Routing
[Path where the view should be available]

## 3. Component Structure
[Outline of main components and their hierarchy]

## 4. Component Details
### [Component Name 1]
- Component description [description]
- Main elements: [description]
- Supported interactions: [list]
- Supported validation: [detailed list]
- Types: [list]
- Props: [list]

### [Component Name 2]
[...]

## 5. Types
[Detailed description of required types]

## 6. State Management
[Description of state management in the view]

## 7. API Integration
[Explanation of integration with the provided endpoint, specifying request and response types]

## 8. User Interactions
[Detailed description of user interactions]

## 9. Conditions and Validation
[Detailed description of conditions and their validation]

## 10. Error Handling
[Description of handling potential errors]

## 11. Implementation Steps
1. [Step 1]
2. [Step 2]
3. [...]
```

Begin your analysis and planning now. Your final output should consist only of the implementation plan in Polish in markdown format, which you will save in the file .ai/{view-name}-view-implementation-plan.md, and should not duplicate or repeat any work done in the implementation breakdown. 